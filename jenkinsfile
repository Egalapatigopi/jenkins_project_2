pipeline{
    agent any
    tools{
        maven 'maven3'
    }
    stages{
        stage('Checkout'){
            steps{
                checkout scmGit(branches: [[name: '*/main']], 
                extensions: [],
                userRemoteConfigs: [[url: 'https://github.com/Egalapatigopi/jenkins_project_2.git']])
            }
        }
        stage('Build'){
            steps{
                sh 'mvn clean install -DskipTests'
            }
            post {
               success {
                 // Archive the build artifacts (e.g., JAR files, WAR files, etc.)
                archiveArtifacts '**/target/*.war'
               }
            }
        }
        stage('Unit test'){
            steps{
                sh 'mvn test'
            }
        }
        stage('Code analysis with checkstyle'){
            steps{
                sh 'mvn checkstyle:checkstyle'
            }
            post{
                success{
                    echo 'Genareted test result'
                }
            }
        }
        stage('Code analysis with sonar'){
            environment {
                scannerHome = tool "sonar4.7"
            }
            steps{
                  withSonarQubeEnv('sonar'){
                  sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vprofile-repo \
                   -Dsonar.projectVersion=3.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
                }
            }
        }
        stage('Quality gate'){
            steps{
                timeout(time: 10, unit: 'MINUTES') {
               waitForQualityGate abortPipeline: true
               }
            }
        }
        stage('Upload to Artifactory') {
            steps {
                script {
                    // Use the Artifactory plugin to upload artifacts.
                    def server = Artifactory.server 'jfrog'
                    def buildInfo = Artifactory.newBuildInfo()

                    // Define your artifacts to upload
                    def filesToUpload = server.upload spec: '''{
                        "files": [
                            {
                                "pattern": "/var/lib/jenkins/workspace/maven_sonar/target/*.war",
                                "target": " libs-release-local/vprofile-v2.war"
                            }
                        ]
                    }'''

                    buildInfo.append(vprofile-v2.war)
                    server.publishBuildInfo buildInfo
                }
            }
        }
    }
}
            